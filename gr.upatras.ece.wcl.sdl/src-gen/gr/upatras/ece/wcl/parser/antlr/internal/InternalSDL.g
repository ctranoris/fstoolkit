/*
* generated by Xtext
*/
grammar InternalSDL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package gr.upatras.ece.wcl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package gr.upatras.ece.wcl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import gr.upatras.ece.wcl.services.SDLGrammarAccess;

}

@parser::members {

 	private SDLGrammarAccess grammarAccess;
 	
    public InternalSDLParser(TokenStream input, IAstFactory factory, SDLGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("gr/upatras/ece/wcl/parser/antlr/internal/InternalSDL.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ServiceRule";	
   	}
   	
   	@Override
   	protected SDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleServiceRule
entryRuleServiceRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getServiceRuleRule(), currentNode); }
	 iv_ruleServiceRule=ruleServiceRule 
	 { $current=$iv_ruleServiceRule.current; } 
	 EOF 
;

// Rule ServiceRule
ruleServiceRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getServiceRuleAccess().getServiceRuleAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getServiceRuleAccess().getServiceRuleAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServiceRuleAccess().getImportsImportParserRuleCall_1_0(), currentNode); 
	    }
		lv_imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_1_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServiceRuleAccess().getOfferedServiceOfferedServiceParserRuleCall_2_0(), currentNode); 
	    }
		lv_offeredService_2_0=ruleOfferedService		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"offeredService",
	        		lv_offeredService_2_0, 
	        		"OfferedService", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import office' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportOfficeKeyword_0(), null); 
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getImportAccess().getSemicolonKeyword_2(), null); 
    }
)
;







// Entry rule entryRuleSettingType
entryRuleSettingType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSettingTypeRule(), currentNode); }
	 iv_ruleSettingType=ruleSettingType 
	 { $current=$iv_ruleSettingType.current; } 
	 EOF 
;

// Rule SettingType
ruleSettingType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSettingTypeAccess().getTideTypeSTRINGParserRuleCall_0(), currentNode); 
    }
    this_tideTypeSTRING_0=ruletideTypeSTRING
    { 
        $current = $this_tideTypeSTRING_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSettingTypeAccess().getTideTypeEnumParserRuleCall_1(), currentNode); 
    }
    this_tideTypeEnum_1=ruletideTypeEnum
    { 
        $current = $this_tideTypeEnum_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleServiceSetting
entryRuleServiceSetting returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getServiceSettingRule(), currentNode); }
	 iv_ruleServiceSetting=ruleServiceSetting 
	 { $current=$iv_ruleServiceSetting.current; } 
	 EOF 
;

// Rule ServiceSetting
ruleServiceSetting returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getServiceSettingAccess().getServiceSettingAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getServiceSettingAccess().getServiceSettingAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_userExposed_1_0=	'userExposed' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getUserExposedUserExposedKeyword_1_0(), "userExposed"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "userExposed", true, "userExposed", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_userEditable_2_0=	'userEditable' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getUserEditableUserEditableKeyword_2_0(), "userEditable"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "userEditable", true, "userEditable", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_canBePublished_3_0=	'canBePublished' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getCanBePublishedCanBePublishedKeyword_3_0(), "canBePublished"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "canBePublished", true, "canBePublished", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'ServiceSetting' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getServiceSettingKeyword_4(), null); 
    }
(
(
		lv_name_5_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getServiceSettingAccess().getNameSTRINGTerminalRuleCall_5_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_5_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getLeftCurlyBracketKeyword_6(), null); 
    }
(	'id' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getIdKeyword_7_0(), null); 
    }
(
(
		lv_id_8_0=RULE_INT
		{
			createLeafNode(grammarAccess.getServiceSettingAccess().getIdINTTerminalRuleCall_7_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_8_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'description' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getDescriptionKeyword_8_0(), null); 
    }
(
(
		lv_description_10_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getServiceSettingAccess().getDescriptionSTRINGTerminalRuleCall_8_1_0(), "description"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"description",
	        		lv_description_10_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'Readable' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getReadableKeyword_9_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServiceSettingAccess().getReadableEBooleanParserRuleCall_9_1_0(), currentNode); 
	    }
		lv_Readable_12_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Readable",
	        		lv_Readable_12_0, 
	        		"EBoolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'Writable' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getWritableKeyword_10_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServiceSettingAccess().getWritableEBooleanParserRuleCall_10_1_0(), currentNode); 
	    }
		lv_Writable_14_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Writable",
	        		lv_Writable_14_0, 
	        		"EBoolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'requiresParams' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getRequiresParamsKeyword_11_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getLeftParenthesisKeyword_11_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_STRING
	{
		createLeafNode(grammarAccess.getServiceSettingAccess().getRequiresParamsAbstractSettingCrossReference_11_2_0(), "requiresParams"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getCommaKeyword_11_3_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_STRING
	{
		createLeafNode(grammarAccess.getServiceSettingAccess().getRequiresParamsAbstractSettingCrossReference_11_3_1_0(), "requiresParams"); 
	}

)
))*	')' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getRightParenthesisKeyword_11_4(), null); 
    }
)?(	'settingType' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getSettingTypeKeyword_12_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServiceSettingAccess().getSettingTypeSettingTypeParserRuleCall_12_1_0(), currentNode); 
	    }
		lv_settingType_22_0=ruleSettingType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"settingType",
	        		lv_settingType_22_0, 
	        		"SettingType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'}' 
    {
        createLeafNode(grammarAccess.getServiceSettingAccess().getRightCurlyBracketKeyword_13(), null); 
    }
)
;





// Entry rule entryRuleOfferedService
entryRuleOfferedService returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOfferedServiceRule(), currentNode); }
	 iv_ruleOfferedService=ruleOfferedService 
	 { $current=$iv_ruleOfferedService.current; } 
	 EOF 
;

// Rule OfferedService
ruleOfferedService returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getOfferedServiceAccess().getOfferedServiceAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOfferedServiceAccess().getOfferedServiceAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'OfferedService' 
    {
        createLeafNode(grammarAccess.getOfferedServiceAccess().getOfferedServiceKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getOfferedServiceAccess().getNameSTRINGTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOfferedServiceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getOfferedServiceAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(	'serviceSettings' 
    {
        createLeafNode(grammarAccess.getOfferedServiceAccess().getServiceSettingsKeyword_4_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getOfferedServiceAccess().getLeftCurlyBracketKeyword_4_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOfferedServiceAccess().getServiceSettingsServiceSettingParserRuleCall_4_2_0(), currentNode); 
	    }
		lv_serviceSettings_6_0=ruleServiceSetting		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOfferedServiceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"serviceSettings",
	        		lv_serviceSettings_6_0, 
	        		"ServiceSetting", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOfferedServiceAccess().getCommaKeyword_4_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOfferedServiceAccess().getServiceSettingsServiceSettingParserRuleCall_4_3_1_0(), currentNode); 
	    }
		lv_serviceSettings_8_0=ruleServiceSetting		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOfferedServiceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"serviceSettings",
	        		lv_serviceSettings_8_0, 
	        		"ServiceSetting", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getOfferedServiceAccess().getRightCurlyBracketKeyword_4_4(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getOfferedServiceAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEBooleanRule(), currentNode); } 
	 iv_ruleEBoolean=ruleEBoolean 
	 { $current=$iv_ruleEBoolean.current.getText(); }  
	 EOF 
;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='true' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEBooleanAccess().getTrueKeyword_0(), null); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEBooleanAccess().getFalseKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuletideTypeSTRING
entryRuletideTypeSTRING returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTideTypeSTRINGRule(), currentNode); }
	 iv_ruletideTypeSTRING=ruletideTypeSTRING 
	 { $current=$iv_ruletideTypeSTRING.current; } 
	 EOF 
;

// Rule tideTypeSTRING
ruletideTypeSTRING returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTideTypeSTRINGAccess().getTideTypeStringAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTideTypeSTRINGAccess().getTideTypeStringAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'STRING' 
    {
        createLeafNode(grammarAccess.getTideTypeSTRINGAccess().getSTRINGKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getTideTypeSTRINGAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'defaultValue' 
    {
        createLeafNode(grammarAccess.getTideTypeSTRINGAccess().getDefaultValueKeyword_3_0(), null); 
    }
(
(
		lv_defaultValue_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTideTypeSTRINGAccess().getDefaultValueSTRINGTerminalRuleCall_3_1_0(), "defaultValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTideTypeSTRINGRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultValue",
	        		lv_defaultValue_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	'}' 
    {
        createLeafNode(grammarAccess.getTideTypeSTRINGAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuletideTypeEnum
entryRuletideTypeEnum returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTideTypeEnumRule(), currentNode); }
	 iv_ruletideTypeEnum=ruletideTypeEnum 
	 { $current=$iv_ruletideTypeEnum.current; } 
	 EOF 
;

// Rule tideTypeEnum
ruletideTypeEnum returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTideTypeEnumAccess().getTideTypeEnumAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTideTypeEnumAccess().getTideTypeEnumAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'Enum' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumAccess().getEnumKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTideTypeEnumAccess().getNameSTRINGTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTideTypeEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(	'defaultValue' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumAccess().getDefaultValueKeyword_4_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTideTypeEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_STRING
	{
		createLeafNode(grammarAccess.getTideTypeEnumAccess().getDefaultValueTideTypeEnumItemCrossReference_4_1_0(), "defaultValue"); 
	}

)
))?(	'tideEnumlist' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumAccess().getTideEnumlistKeyword_5_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumAccess().getLeftCurlyBracketKeyword_5_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTideTypeEnumAccess().getTideEnumlistTideTypeEnumItemParserRuleCall_5_2_0(), currentNode); 
	    }
		lv_tideEnumlist_8_0=ruletideTypeEnumItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTideTypeEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"tideEnumlist",
	        		lv_tideEnumlist_8_0, 
	        		"tideTypeEnumItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumAccess().getCommaKeyword_5_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTideTypeEnumAccess().getTideEnumlistTideTypeEnumItemParserRuleCall_5_3_1_0(), currentNode); 
	    }
		lv_tideEnumlist_10_0=ruletideTypeEnumItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTideTypeEnumRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"tideEnumlist",
	        		lv_tideEnumlist_10_0, 
	        		"tideTypeEnumItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumAccess().getRightCurlyBracketKeyword_5_4(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuletideTypeEnumItem
entryRuletideTypeEnumItem returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTideTypeEnumItemRule(), currentNode); }
	 iv_ruletideTypeEnumItem=ruletideTypeEnumItem 
	 { $current=$iv_ruletideTypeEnumItem.current; } 
	 EOF 
;

// Rule tideTypeEnumItem
ruletideTypeEnumItem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTideTypeEnumItemAccess().getTideTypeEnumItemAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTideTypeEnumItemAccess().getTideTypeEnumItemAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'tideTypeEnumItem' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumItemAccess().getTideTypeEnumItemKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumItemAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(	'value' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumItemAccess().getValueKeyword_3_0(), null); 
    }
(
(
		lv_value_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTideTypeEnumItemAccess().getValueSTRINGTerminalRuleCall_3_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTideTypeEnumItemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	'}' 
    {
        createLeafNode(grammarAccess.getTideTypeEnumItemAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


