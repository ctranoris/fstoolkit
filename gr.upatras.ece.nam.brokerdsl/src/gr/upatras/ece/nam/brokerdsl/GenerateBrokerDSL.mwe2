module gr.upatras.ece.nam.brokerdsl.BrokerDSL

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/gr/upatras/ece/nam/brokerdsl/BrokerDSL.xtext"
var file.extensions = "brokerdsl"
var projectName = "gr.upatras.ece.nam.brokerdsl"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		scanClassPath  = true
		platformUri = "${runtimeProject}/.."
	registerGeneratedEPackage = "brokermodel.resources.ResourcesPackage"
	registerGeneratedEPackage = "brokermodel.providersite.ProvidersitePackage"
	registerGeneratedEPackage = "brokermodel.uiObjects.UiObjectsPackage"
	registerGeneratedEPackage = "brokermodel.slareservations.SlareservationsPackage"
	registerGeneratedEPackage = "brokermodel.availabilityContract.AvailabilityContractPackage"
	registerGeneratedEPackage = "brokermodel.BrokermodelPackage"
	registerGeneratedEPackage = "brokermodel.services.ServicesPackage"
	registerGeneratedEPackage = "brokermodel.users.UsersPackage"
	registerGeneratedEPackage = "brokermodel.experimentRuntime.ExperimentRuntimePackage"
	registerGeneratedEPackage = "brokermodel.federationscenarios.FederationscenariosPackage"
	registerGenModelFile = "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.genmodel"
	
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages
			fragment = ecore.EcoreGeneratorFragment {}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// the Antlr parser
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
				options = {
					classSplitting = true
				}
			}

			// the Ecore2Xtext specific terminal converter
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment {}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
			 composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			 composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportURIScopingFragment {
				
			}
			//fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 

			// fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {
				
			}


			// formatter API 
			fragment = ecore2xtext.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// antlr parser generator tailored for content assist 
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
				options = {
					classSplitting = true
				}
			}

			// provides a compare view
            fragment = compare.CompareFragment {
                fileExtensions = file.extensions
            }

			fragment = builder.BuilderIntegrationFragment {}

			// project wizard (optional) 

			// fragment = projectWizard.SimpleProjectWizardFragment {
			//		generatorProjectName = "${projectName}.generator" 
			//		modelFileExtension = file.extensions
			// }

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}
		}
	}
}
