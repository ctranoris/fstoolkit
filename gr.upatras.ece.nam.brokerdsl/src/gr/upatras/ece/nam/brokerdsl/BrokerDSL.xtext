// automatically generated by Xtext
grammar gr.upatras.ece.nam.brokerdsl.BrokerDSL with org.eclipse.xtext.common.Terminals


import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore#//resources" as resources
import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore#//services" as services
import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore#//providersite" as providersite
import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore#//uiObjects" as uiObjects
import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore" as Broker
import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore#//slareservations" as slareservations
import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore#//federationscenarios" as federationscenarios
import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore#//availabilityContract" as availabilityContract
import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore#//users" as users
import "platform:/resource/gr.upatras.ece.nam.broker.model/model/Broker.ecore#//experimentRuntime" as experimentRuntime


generate brokerDSLsyntax "http://nam.ece.upatras.gr/brokerdsl/BrokerDSL"

BrokerRule:
	{BrokerRule}
	(imports+=ImportBroker)*
	testbedBrokerv=Broker
;	

ImportBroker :
  'import service description' importURI=STRING ';'
;  

Broker returns Broker::Broker:
	{Broker::Broker}
	'Broker'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('resourceURI' resourceURI=STRING)?
		('APIGateway' APIGateway=STRING)?
		('registeredUsers' '{' registeredUsers+=BrokerUser ( "," registeredUsers+=BrokerUser)* '}' )?
		('contributedTaxonomies' '{' contributedTaxonomies+=Taxonomy ( "," contributedTaxonomies+=Taxonomy)* '}' )?
		('offeredServices' '{' offeredServices+=OfferedService ( "," offeredServices+=OfferedService)* '}' )?
		('availableFederationScenarios' '{' availableFederationScenarios+=RequestedFederationScenario ( "," availableFederationScenarios+=RequestedFederationScenario)* '}' )?
		('offeredServiceCompositions' '{' offeredServiceCompositions+=ServiceComposition ( "," offeredServiceCompositions+=ServiceComposition)* '}' )?
		('ResourceServiceContracts' '{' ResourceServiceContracts+=ResourceServiceContract ( "," ResourceServiceContracts+=ResourceServiceContract)* '}' )?
		('SLAs' '{' SLAs+=SLA ( "," SLAs+=SLA)* '}' )?
	'}';

BrokerUser returns users::BrokerUser:
	ResourcesProvider | TestbedDesigner | Admin | BrokerCustomer | BrokerPersonel_Impl;








Service returns services::Service:
	Service_Impl | OfferedService;




















Resource returns resources::Resource:
	Resource_Impl | OfferedResource;

SettingType returns services::SettingType:
	brTypeString | brTypeEnum | brTypeList | brTypeTideElement;


AbstractSetting returns services::AbstractSetting:
	AbstractSetting_Impl | ServiceSetting;


NamedElement returns Broker::NamedElement:
	Broker;


SettingInstance returns federationscenarios::SettingInstance:
	SettingInstance_Impl | ServiceSettingInstance | ResourceSettingInstance;



//STRING returns ecore::STRING:
//	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

Taxonomy returns services::Taxonomy:
	{services::Taxonomy}
	'Taxonomy'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('hasScenarios' '(' hasScenarios+=[federationscenarios::RequestedFederationScenario|STRING] ( "," hasScenarios+=[federationscenarios::RequestedFederationScenario|STRING])* ')' )?
		('hasServices' '(' hasServices+=[services::Service|STRING] ( "," hasServices+=[services::Service|STRING])* ')' )?
		('taxonomies' '{' taxonomies+=Taxonomy ( "," taxonomies+=Taxonomy)* '}' )?
		('categories' '{' categories+=ResourceCategory ( "," categories+=ResourceCategory)* '}' )?
	'}';

OfferedService returns services::OfferedService:
	{services::OfferedService}
	'OfferedService'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('requiresServices' '(' requiresServices+=[services::Service|STRING] ( "," requiresServices+=[services::Service|STRING])* ')' )?
		('serviceSettings' '{' serviceSettings+=ServiceSetting ( "," serviceSettings+=ServiceSetting)* '}' )?
	'}';

RequestedFederationScenario returns federationscenarios::RequestedFederationScenario:
	{federationscenarios::RequestedFederationScenario}
	(isShared?='isShared')?
	'RequestedFederationScenario'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('status' status=ScenarioStatus)?
		('VTCredentials' VTCredentials=Credentials)?
		('servicesRequest' servicesRequest=ServicesRequest)?
		('infrastructureRequest' infrastructureRequest=InfrastructureRequest)?
		('scheduledPlan' scheduledPlan=ScheduledPlan)?
		('imports' '{' imports+=Import ( "," imports+=Import)* '}' )?
		('runtimeInfo' runtimeInfo=RuntimeElement)?
	'}';

ServiceComposition returns services::ServiceComposition:
	{services::ServiceComposition}
	'ServiceComposition'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('hasServices' '(' hasServices+=[services::Service|STRING] ( "," hasServices+=[services::Service|STRING])* ')' )?
	'}';

ResourceServiceContract returns availabilityContract::ResourceServiceContract:
	'ResourceServiceContract'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		'StartDate' StartDate=EDate
		'EndDate' EndDate=EDate
		'forOfferedService' forOfferedService=[services::Service|STRING]
		'forOfferedResource' forOfferedResource=[resources::OfferedResource|STRING]
		('availability' availability=Availability)?
	'}';

SLA returns slareservations::SLA:
	{slareservations::SLA}
	'SLA'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ValidFrom' ValidFrom=EDate)?
		('ValidUntil' ValidUntil=EDate)?
		('forVT' forVT=[federationscenarios::RequestedFederationScenario|STRING])?
		('ReservedRsources' '{' ReservedRsources+=ReservedResourceContract ( "," ReservedRsources+=ReservedResourceContract)* '}' )?
	'}';

Account returns users::Account:
	{users::Account}
	'Account'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('password' password=STRING)?
		('username' username=STRING)?
	'}';

ResourcesProvider returns users::ResourcesProvider:
	{users::ResourcesProvider}
	'ResourcesProvider'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('hasAccount' hasAccount=Account)?
		('offeredSiteList' '{' offeredSiteList+=Site ( "," offeredSiteList+=Site)* '}' )?
	'}';

TestbedDesigner returns users::TestbedDesigner:
	{users::TestbedDesigner}
	'TestbedDesigner'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('designsVirtualTestbeds' '(' designsVirtualTestbeds+=[federationscenarios::RequestedFederationScenario|STRING] ( "," designsVirtualTestbeds+=[federationscenarios::RequestedFederationScenario|STRING])* ')' )?
		('hasAccount' hasAccount=Account)?
	'}';

Admin returns users::Admin:
	{users::Admin}
	'Admin'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('hasAccount' hasAccount=Account)?
	'}';

BrokerCustomer returns users::BrokerCustomer:
	{users::BrokerCustomer}
	'BrokerCustomer'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('utilizesVirtualTestbed' '(' utilizesVirtualTestbed+=[federationscenarios::RequestedFederationScenario|STRING] ( "," utilizesVirtualTestbed+=[federationscenarios::RequestedFederationScenario|STRING])* ')' )?
		('hasTestbedDesigner' hasTestbedDesigner=[users::TestbedDesigner|STRING])?
		('hasAccount' hasAccount=Account)?
	'}';

BrokerPersonel_Impl returns users::BrokerPersonel:
	{users::BrokerPersonel}
	'BrokerPersonel'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('hasAccount' hasAccount=Account)?
	'}';



Site returns providersite::Site:
	'Site'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		domainManager= DomainManager
		'locatedAt' locatedAt=SiteLocation
		('offeredResourcesList' '{' offeredResourcesList+=OfferedResource ( "," offeredResourcesList+=OfferedResource)* '}' )?
	'}';

DomainManager returns providersite::DomainManager:
	{providersite::DomainManager}
	'DomainManager'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('IP' IP=STRING)?
	'}';

SiteLocation returns providersite::SiteLocation:
	{providersite::SiteLocation}
	'SiteLocation'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('address' address=STRING)?
		('geocoords' geocoords=STRING)?
	'}';

OfferedResource returns resources::OfferedResource:
	{resources::OfferedResource}
	'OfferedResource'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('resourceType' resourceType=ResourceType)?
		('multitonMaxOccur' multitonMaxOccur=EInt)?
		('geocoords' geocoords=STRING)?
		('contributesToCategories' '(' contributesToCategories+=[resources::ResourceCategory|STRING] ( "," contributesToCategories+=[resources::ResourceCategory|STRING])* ')' )?
		('requiresResources' '(' requiresResources+=[resources::Resource|STRING] ( "," requiresResources+=[resources::Resource|STRING])* ')' )?
		('implOfferedService' implOfferedService=[services::Service|STRING])?
		('resourceSettings' '{' resourceSettings+=ResourceSetting ( "," resourceSettings+=ResourceSetting)* '}' )?
	'}';

ResourceSetting returns resources::ResourceSetting:
	{resources::ResourceSetting}
	'ResourceSetting'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		(userExposed?='userExposed')?
		(userEditable?='userEditable')?
		(canBePublished?='canBePublished')?
		(Readable?='Readable')?
		(Writable?='Writable')?
		(Optional?='Optional')?
		('requiresParams' '(' requiresParams+=[services::AbstractSetting|STRING] ( "," requiresParams+=[services::AbstractSetting|STRING])* ')' )?
		('OnlyConfiguredByResources' '(' OnlyConfiguredByResources+=[resources::Resource|STRING] ( "," OnlyConfiguredByResources+=[resources::Resource|STRING])* ')' )?
		('implServiceSetting' implServiceSetting=[services::ServiceSetting|STRING])?
		('settingType' settingType=SettingType)?
		('settingConstraints' '{' settingConstraints+=SettingConstraint ( "," settingConstraints+=SettingConstraint)* '}' )?
	'}';

ResourceCategory returns resources::ResourceCategory:
	{resources::ResourceCategory}
	'ResourceCategory'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('resourcelist' '(' resourcelist+=[resources::Resource|STRING] ( "," resourcelist+=[resources::Resource|STRING])* ')' )?
	'}';

Resource_Impl returns resources::Resource:
	{resources::Resource}
	'Resource'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('contributesToCategories' '(' contributesToCategories+=[resources::ResourceCategory|STRING] ( "," contributesToCategories+=[resources::ResourceCategory|STRING])* ')' )?
		('requiresResources' '(' requiresResources+=[resources::Resource|STRING] ( "," requiresResources+=[resources::Resource|STRING])* ')' )?
		('resourceSettings' '{' resourceSettings+=ResourceSetting ( "," resourceSettings+=ResourceSetting)* '}' )?
	'}';

ResourceType returns resources::ResourceType:
	'ResourceType' /* TODO: implement this rule and an appropriate IValueConverter */;

Service_Impl returns services::Service:
	{services::Service}
	'Service'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('requiresServices' '(' requiresServices+=[services::Service|STRING] ( "," requiresServices+=[services::Service|STRING])* ')' )?
		('serviceSettings' '{' serviceSettings+=ServiceSetting ( "," serviceSettings+=ServiceSetting)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

SettingConstraint returns services::SettingConstraint:
	{services::SettingConstraint}
	(AvailableAfterOperation?='AvailableAfterOperation')?
	(RequiredBeforeOperation?='RequiredBeforeOperation')?
	'SettingConstraint'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ForOperation' ForOperation=ServiceResourceOperation)?
	'}';

AbstractSetting_Impl returns services::AbstractSetting:
	{services::AbstractSetting}
	'AbstractSetting'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		(userExposed?='userExposed')?
		(userEditable?='userEditable')?
		(canBePublished?='canBePublished')?
		(Readable?='Readable')?
		(Writable?='Writable')?
		(Optional?='Optional')?
		('requiresParams' '(' requiresParams+=[services::AbstractSetting|STRING] ( "," requiresParams+=[services::AbstractSetting|STRING])* ')' )?
		('settingType' settingType=SettingType)?
		('settingConstraints' '{' settingConstraints+=SettingConstraint ( "," settingConstraints+=SettingConstraint)* '}' )?
	'}';

ServiceSetting returns services::ServiceSetting:
	{services::ServiceSetting}
	'ServiceSetting'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		(userExposed?='userExposed')?
		(userEditable?='userEditable')?
		(canBePublished?='canBePublished')?
		(Readable?='Readable')?
		(Writable?='Writable')?
		(Optional?='Optional')?
		('requiresParams' '(' requiresParams+=[services::AbstractSetting|STRING] ( "," requiresParams+=[services::AbstractSetting|STRING])* ')' )?
		('mappedToResourceSettings' '(' mappedToResourceSettings+=[resources::ResourceSetting|STRING] ( "," mappedToResourceSettings+=[resources::ResourceSetting|STRING])* ')' )?
		('providedByResources' '(' providedByResources+=[resources::Resource|STRING] ( "," providedByResources+=[resources::Resource|STRING])* ')' )?
		('settingType' settingType=SettingType)?
		('settingConstraints' '{' settingConstraints+=SettingConstraint ( "," settingConstraints+=SettingConstraint)* '}' )?
	'}';

brTypeString returns services::brTypeString:
	{services::brTypeString}
	'brTypeString'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('defaultValue' defaultValue=STRING)?
	'}';

brTypeEnum returns services::brTypeEnum:
	{services::brTypeEnum}
	'brTypeEnum'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('defaultValue' defaultValue=[services::brTypeEnumItem|STRING])?
		('tideEnumlist' '{' tideEnumlist+=brTypeEnumItem ( "," tideEnumlist+=brTypeEnumItem)* '}' )?
	'}';

brTypeList returns services::brTypeList:
	{services::brTypeList}
	'brTypeList'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ContainsElementsOf' ContainsElementsOf=[Broker::NamedElement|STRING])?
	'}';

brTypeTideElement returns services::brTypeTideElement:
	{services::brTypeTideElement}
	'brTypeTideElement'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ofTideElement' ofTideElement=[Broker::NamedElement|STRING])?
	'}';

brTypeEnumItem returns services::brTypeEnumItem:
	{services::brTypeEnumItem}
	'brTypeEnumItem'
	'{'
		('value' value=STRING)?
		('description' description=STRING)?
	'}';

ServiceResourceOperation returns services::ServiceResourceOperation:
	'ServiceResourceOperation' /* TODO: implement this rule and an appropriate IValueConverter */;

ScenarioStatus returns Broker::ScenarioStatus:
	'ScenarioStatus' /* TODO: implement this rule and an appropriate IValueConverter */;

Credentials returns federationscenarios::Credentials:
	{federationscenarios::Credentials}
	'Credentials'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('username' username=STRING)?
		('password' password=STRING)?
	'}';

ServicesRequest returns federationscenarios::ServicesRequest:
	{federationscenarios::ServicesRequest}
	'ServicesRequest'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('serviceRequestList' '{' serviceRequestList+=ServiceRequest ( "," serviceRequestList+=ServiceRequest)* '}' )?
	'}';

InfrastructureRequest returns federationscenarios::InfrastructureRequest:
	{federationscenarios::InfrastructureRequest}
	'InfrastructureRequest'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('reqOfferedResources' '{' reqOfferedResources+=ResourceRequest ( "," reqOfferedResources+=ResourceRequest)* '}' )?
		('resourceGroups' '{' resourceGroups+=ResourceGroup ( "," resourceGroups+=ResourceGroup)* '}' )?
	'}';

ScheduledPlan returns federationscenarios::ScheduledPlan:
	{federationscenarios::ScheduledPlan}
	'ScheduledPlan'
	'{'
		('ValidFrom' ValidFrom=EDate)?
		('ValidUntil' ValidUntil=EDate)?
	'}';

Import returns federationscenarios::Import:
	{federationscenarios::Import}
	'Import'
	'{'
		('importURI' importURI=STRING)?
	'}';

RuntimeElement returns experimentRuntime::RuntimeElement:
	{experimentRuntime::RuntimeElement}
	'RuntimeElement'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('status' status=RuntimeElementStatus)?
		('GUID' GUID=STRING)?
		('context' context=STRING)?
	'}';

ServiceRequest returns federationscenarios::ServiceRequest:
	'ServiceRequest'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('numOfServices' numOfServices=EInt)?
		'refService' refService=[services::Service|STRING]
		('OfferedByProviders' OfferedByProviders=[users::ResourcesProvider|STRING])?
		('reqServiceSettings' '{' reqServiceSettings+=ServiceSettingInstance ( "," reqServiceSettings+=ServiceSettingInstance)* '}' )?
	'}';

ServiceSettingInstance returns federationscenarios::ServiceSettingInstance:
	'ServiceSettingInstance'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('staticValue' staticValue=STRING)?
		('assignSetting' '(' assignSetting+=[federationscenarios::SettingInstance|STRING] ( "," assignSetting+=[federationscenarios::SettingInstance|STRING])* ')' )?
		'refServiceSetting' refServiceSetting=[services::ServiceSetting|STRING]
	'}';

SettingInstance_Impl returns federationscenarios::SettingInstance:
	{federationscenarios::SettingInstance}
	'SettingInstance'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('staticValue' staticValue=STRING)?
		('assignSetting' '(' assignSetting+=[federationscenarios::SettingInstance|STRING] ( "," assignSetting+=[federationscenarios::SettingInstance|STRING])* ')' )?
	'}';

ResourceSettingInstance returns federationscenarios::ResourceSettingInstance:
	'ResourceSettingInstance'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('staticValue' staticValue=STRING)?
		('assignSetting' '(' assignSetting+=[federationscenarios::SettingInstance|STRING] ( "," assignSetting+=[federationscenarios::SettingInstance|STRING])* ')' )?
		'refResourceSetting' refResourceSetting=[resources::ResourceSetting|STRING]
	'}';

ResourceRequest returns federationscenarios::ResourceRequest:
	'ResourceRequest'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		'refOfferedResource' refOfferedResource=[resources::OfferedResource|STRING]
		('reqResourceSettings' '{' reqResourceSettings+=ResourceSettingInstance ( "," reqResourceSettings+=ResourceSettingInstance)* '}' )?
		('runtimeInfo' runtimeInfo=RuntimeElement)?
	'}';

ResourceGroup returns federationscenarios::ResourceGroup:
	{federationscenarios::ResourceGroup}
	'ResourceGroup'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('groupedResources' '(' groupedResources+=[federationscenarios::ResourceRequest|STRING] ( "," groupedResources+=[federationscenarios::ResourceRequest|STRING])* ')' )?
	'}';

EDate returns ecore::EDate:
	STRING /* TODO: implement this rule and an appropriate IValueConverter */;

RuntimeElementStatus returns experimentRuntime::RuntimeElementStatus:
	'RuntimeElementStatus' /* TODO: implement this rule and an appropriate IValueConverter */;

Availability returns availabilityContract::Availability:
	{availabilityContract::Availability}
	'Availability'
	'{'
		('FromTime' FromTime=EDate)?
		('ToTime' ToTime=EDate)?
		('FromDate' FromDate=EDate)?
		('ToDate' ToDate=EDate)?
		('Repeatability' Repeatability=RepatabilityScheme)?
		('RepeatUntil' RepeatUntil=EDate)?
		('cost' cost=Cost)?
		(Repeat?='Repeat')?
	'}';

Cost returns availabilityContract::Cost:
	{availabilityContract::Cost}
	'Cost'
	'{'
		('perUnit' perUnit=costUnit)?
		('Amount' Amount=EDoubleObject)?
	'}';

enum RepatabilityScheme returns availabilityContract::RepatabilityScheme:
	DAILY = 'DAILY' | WEEKLY = 'WEEKLY' | MONTHLY = 'MONTHLY' | YEARLY = 'YEARLY';

enum costUnit returns availabilityContract::costUnit:
	MIN = 'MIN' | HOUR = 'HOUR' | DAY = 'DAY' | USAGE = 'USAGE' | OTHER = 'OTHER';

EDoubleObject returns ecore::EDoubleObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

ReservedResourceContract returns slareservations::ReservedResourceContract:
	{slareservations::ReservedResourceContract}
	'ReservedResourceContract'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ValidFrom' ValidFrom=EDate)?
		('ValidUntil' ValidUntil=EDate)?
		('forResource' forResource=[resources::OfferedResource|STRING])?
	'}';
