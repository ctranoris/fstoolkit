grammar org.panlab.software.officedl2.OfficeDL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import 'platform:/resource/org.panlab.software.office.model/model/FederationOffice.ecore'   as office
import 'platform:/resource/org.panlab.software.office.model/model/FederationOffice.ecore#//users'   as users
import 'platform:/resource/org.panlab.software.office.model/model/FederationOffice.ecore#//services'   as services
import 'platform:/resource/org.panlab.software.office.model/model/FederationOffice.ecore#//resources'   as resources
import 'platform:/resource/org.panlab.software.office.model/model/FederationOffice.ecore#//providersite'   as providersite
import 'platform:/resource/org.panlab.software.office.model/model/FederationOffice.ecore#//slareservations'   as slareservations
import 'platform:/resource/org.panlab.software.office.model/model/FederationOffice.ecore#//availabilityContract'   as availabilityContract
import 'platform:/resource/org.panlab.software.office.model/model/FederationOffice.ecore#//networkelements' as networkelements
import 'platform:/resource/org.panlab.software.office.model/model/FederationOffice.ecore#//federationscenarios' as federationscenarios
 
generate officeDL "http://www.panlab.org/software/officedl2/OfficeDL"

OfficeRule:
	{OfficeRule}
	(imports+=ImportOffice)*
	testbedOfficev=Office
;	

ImportOffice :
  'import service description' importURI=STRING ';'
;  


Office returns office::Office:
	{office::Office}
	'Office'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('resourceURI' resourceURI=STRING)?
		('APIGateway' APIGateway=STRING)?
		('registeredUsers' '{' registeredUsers+=OfficeUser ( "," registeredUsers+=OfficeUser)* '}' )?
		('contributedTaxonomies' '{' contributedTaxonomies+=Taxonomy ( "," contributedTaxonomies+=Taxonomy)* '}' )?
		('offeredServices' '{' offeredServices+=OfferedService ( "," offeredServices+=OfferedService)* '}' )?
		('offeredServiceCompositions' '{' offeredServiceCompositions+=ServiceComposition ( "," offeredServiceCompositions+=ServiceComposition)* '}' )?
		('ResourceServiceContracts' '{' ResourceServiceContracts+=ResourceServiceContract ( "," ResourceServiceContracts+=ResourceServiceContract)* '}' )?
		('SLAs' '{' SLAs+=SLA ( "," SLAs+=SLA)* '}' )?
    '}';


OfficeUser returns users::OfficeUser:
	ResourcesProvider_Impl | TestbedDesigner | Admin | OfficeCustomer | OfficePersonel_Impl ;

Service returns services::Service:
	Service_Impl | OfferedService;

Resource returns resources::Resource:
	Resource_Impl | OfferedResource;

SettingType returns services::SettingType:
	tideTypeString | tideTypeEnum | tideTypeList | tideTypeTideElement;

AbstractSetting returns services::AbstractSetting:
	AbstractSetting_Impl | ServiceSetting;

NamedElement returns office::NamedElement:
	Office;

EInt returns ecore::EInt:
	'-'? INT;

Taxonomy returns services::Taxonomy:
	{services::Taxonomy}
	'Taxonomy'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('hasScenarios' '(' hasScenarios+=[federationscenarios::RequestedFederationScenario|STRING] ( "," hasScenarios+=[federationscenarios::RequestedFederationScenario|STRING])* ')' )?
		('hasServices' '(' hasServices+=[services::Service|STRING] ( "," hasServices+=[services::Service|STRING])* ')' )?
		('taxonomies' '{' taxonomies+=Taxonomy ( "," taxonomies+=Taxonomy)* '}' )?
		('categories' '{' categories+=ResourceCategory ( "," categories+=ResourceCategory)* '}' )?
    '}';

OfferedService returns services::OfferedService:
	{services::OfferedService}
	'OfferedService'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('requiresServices' '(' requiresServices+=[services::Service|STRING] ( "," requiresServices+=[services::Service|STRING])* ')' )?
		('serviceSettings' '{' serviceSettings+=ServiceSetting ( "," serviceSettings+=ServiceSetting)* '}' )?
    '}';

ServiceComposition returns services::ServiceComposition:
	{services::ServiceComposition}
	'ServiceComposition'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('hasServices' '(' hasServices+=[services::Service|STRING] ( "," hasServices+=[services::Service|STRING])* ')' )?
    '}';

ResourceServiceContract returns availabilityContract::ResourceServiceContract:
	'ResourceServiceContract'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		'StartDate' StartDate=EDate
		'EndDate' EndDate=EDate
		'forOfferedService' forOfferedService=[services::Service|STRING]
		'forOfferedResource' forOfferedResource=[resources::OfferedResource|STRING]
		('availability' availability=Availability)?
    '}';

SLA returns slareservations::SLA:
	{slareservations::SLA}
	'SLA'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ValidFrom' ValidFrom=EDate)?
		('ValidUntil' ValidUntil=EDate)?
		('forVT' forVT=[federationscenarios::RequestedFederationScenario|STRING])?
		('ReservedRsources' '{' ReservedRsources+=ReservedResourceContract ( "," ReservedRsources+=ReservedResourceContract)* '}' )?
    '}';

Account returns users::Account:
	{users::Account}
	'Account'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('password' password=STRING)?
		('username' username=STRING)?
    '}';

ResourcesProvider_Impl returns users::ResourcesProvider:
	{users::ResourcesProvider}
	'ResourcesProvider'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('hasAccount' hasAccount=Account)?
		('offeredSiteList' '{' offeredSiteList+=Site ( "," offeredSiteList+=Site)* '}' )?
    '}';

TestbedDesigner returns users::TestbedDesigner:
	{users::TestbedDesigner}
	'TestbedDesigner'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('designsVirtualTestbeds' '(' designsVirtualTestbeds+=[federationscenarios::RequestedFederationScenario|STRING] ( "," designsVirtualTestbeds+=[federationscenarios::RequestedFederationScenario|STRING])* ')' )?
		('hasAccount' hasAccount=Account)?
    '}';

Admin returns users::Admin:
	{users::Admin}
	'Admin'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('hasAccount' hasAccount=Account)?
    '}';

OfficeCustomer returns users::OfficeCustomer:
	{users::OfficeCustomer}
	'OfficeCustomer'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('utilizesVirtualTestbed' '(' utilizesVirtualTestbed+=[federationscenarios::RequestedFederationScenario|STRING] ( "," utilizesVirtualTestbed+=[federationscenarios::RequestedFederationScenario|STRING])* ')' )?
		('hasTestbedDesigner' hasTestbedDesigner=[users::TestbedDesigner|STRING])?
		('hasAccount' hasAccount=Account)?
    '}';

OfficePersonel_Impl returns users::OfficePersonel:
	{users::OfficePersonel}
	'OfficePersonel'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('organization' organization=STRING)?
		('address' address=STRING)?
		('telephone' telephone=STRING)?
		('hasAccount' hasAccount=Account)?
    '}';

Site returns providersite::Site:
	'Site'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		'ptm' ptm=PTM
		'igwlist' '{' igwlist+=IGW ( "," igwlist+=IGW)* '}' 
		'locatedAt' locatedAt=SiteLocation
		('offeredResourcesList' '{' offeredResourcesList+=OfferedResource ( "," offeredResourcesList+=OfferedResource)* '}' )?
    '}';

PTM returns providersite::PTM:
	{providersite::PTM}
	'PTM'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('IP' IP=STRING)?
    '}';

IGW returns providersite::IGW:
	{providersite::IGW}
	'IGW'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('IP' IP=STRING)?
    '}';

SiteLocation returns providersite::SiteLocation:
	{providersite::SiteLocation}
	'SiteLocation'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('address' address=STRING)?
		('geocoords' geocoords=STRING)?
    '}';

OfferedResource returns resources::OfferedResource:
	{resources::OfferedResource}
	'OfferedResource'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('resourceType' resourceType=ResourceType)?
		('multitonMaxOccur' multitonMaxOccur=EInt)?
		('contributesToCategories' '(' contributesToCategories+=[resources::ResourceCategory|STRING] ( "," contributesToCategories+=[resources::ResourceCategory|STRING])* ')' )?
		('requiresResources' '(' requiresResources+=[resources::Resource|STRING] ( "," requiresResources+=[resources::Resource|STRING])* ')' )?
		('implOfferedService' implOfferedService=[services::Service|STRING])?
		('resourceSettings' '{' resourceSettings+=ResourceSetting ( "," resourceSettings+=ResourceSetting)* '}' )?
    '}';

ResourceSetting returns resources::ResourceSetting:
	{resources::ResourceSetting}
	(userExposed?='userExposed')?
	(userEditable?='userEditable')?
	(canBePublished?='canBePublished')?
	'ResourceSetting'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		(Readable?='Readable')?
		(Writable?='Writable')?
		('requiresParams' '(' requiresParams+=[services::AbstractSetting|STRING] ( "," requiresParams+=[services::AbstractSetting|STRING])* ')' )?
		('OnlyConfiguredByResources' '(' OnlyConfiguredByResources+=[resources::Resource|STRING] ( "," OnlyConfiguredByResources+=[resources::Resource|STRING])* ')' )?
		('implServiceSetting' implServiceSetting=[services::ServiceSetting|STRING])?
		('settingType' settingType=SettingType)?
		('settingConstraints' '{' settingConstraints+=SettingConstraint ( "," settingConstraints+=SettingConstraint)* '}' )?
    '}';

ResourceCategory returns resources::ResourceCategory:
	{resources::ResourceCategory}
	'ResourceCategory'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('resourcelist' '(' resourcelist+=[resources::Resource|STRING] ( "," resourcelist+=[resources::Resource|STRING])* ')' )?
    '}';

Resource_Impl returns resources::Resource:
	{resources::Resource}
	'Resource'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('contributesToCategories' '(' contributesToCategories+=[resources::ResourceCategory|STRING] ( "," contributesToCategories+=[resources::ResourceCategory|STRING])* ')' )?
		('requiresResources' '(' requiresResources+=[resources::Resource|STRING] ( "," requiresResources+=[resources::Resource|STRING])* ')' )?
		('resourceSettings' '{' resourceSettings+=ResourceSetting ( "," resourceSettings+=ResourceSetting)* '}' )?
    '}';

enum ResourceType returns resources::ResourceType:
	SINGLETON = 'SINGLETON' | MULTITON = 'MULTITON';

Service_Impl returns services::Service:
	{services::Service}
	'Service'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('requiresServices' '(' requiresServices+=[services::Service|STRING] ( "," requiresServices+=[services::Service|STRING])* ')' )?
		('serviceSettings' '{' serviceSettings+=ServiceSetting ( "," serviceSettings+=ServiceSetting)* '}' )?
    '}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

SettingConstraint returns services::SettingConstraint:
	{services::SettingConstraint}
	'SettingConstraint'
	uniqueID=STRING
	'{'
		(AvailableAfterOperation?='AvailableAfterOperation')?
		(RequiredBeforeOperation?='RequiredBeforeOperation')?
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ForOperation' ForOperation=ServiceResourceOperation)?
    '}';

AbstractSetting_Impl returns services::AbstractSetting:
	{services::AbstractSetting}
	(userExposed?='userExposed')?
	(userEditable?='userEditable')?
	(canBePublished?='canBePublished')?
	'AbstractSetting'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		(Readable?='Readable')?
		(Writable?='Writable')?
		('requiresParams' '(' requiresParams+=[services::AbstractSetting|STRING] ( "," requiresParams+=[services::AbstractSetting|STRING])* ')' )?
		('settingType' settingType=SettingType)?
		('settingConstraints' '{' settingConstraints+=SettingConstraint ( "," settingConstraints+=SettingConstraint)* '}' )?
    '}';

ServiceSetting returns services::ServiceSetting:
	{services::ServiceSetting}
	(userExposed?='userExposed')?
	(userEditable?='userEditable')?
	(canBePublished?='canBePublished')?
	'ServiceSetting'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		(Readable?='Readable')?
		(Writable?='Writable')?
		('requiresParams' '(' requiresParams+=[services::AbstractSetting|STRING] ( "," requiresParams+=[services::AbstractSetting|STRING])* ')' )?
		('mappedToResourceSettings' '(' mappedToResourceSettings+=[resources::ResourceSetting|STRING] ( "," mappedToResourceSettings+=[resources::ResourceSetting|STRING])* ')' )?
		('providedByResources' '(' providedByResources+=[resources::Resource|STRING] ( "," providedByResources+=[resources::Resource|STRING])* ')' )?
		('settingType' settingType=SettingType)?
		('settingConstraints' '{' settingConstraints+=SettingConstraint ( "," settingConstraints+=SettingConstraint)* '}' )?
    '}';

tideTypeString returns services::tideTypeString:
	{services::tideTypeString}
	'tideTypeString'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('defaultValue' defaultValue=STRING)?
    '}';

tideTypeEnum returns services::tideTypeEnum:
	{services::tideTypeEnum}
	'tideTypeEnum'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('defaultValue' defaultValue=[services::tideTypeEnumItem|STRING])?
		('tideEnumlist' '{' tideEnumlist+=tideTypeEnumItem ( "," tideEnumlist+=tideTypeEnumItem)* '}' )?
    '}';

tideTypeList returns services::tideTypeList:
	{services::tideTypeList}
	'tideTypeList'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ContainsElementsOf' ContainsElementsOf=[office::NamedElement|STRING])?
    '}';

tideTypeTideElement returns services::tideTypeTideElement:
	{services::tideTypeTideElement}
	'tideTypeTideElement'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ofTideElement' ofTideElement=[office::NamedElement|STRING])?
    '}';

tideTypeEnumItem returns services::tideTypeEnumItem:
	{services::tideTypeEnumItem}
	'tideTypeEnumItem'
	'{'
		('value' value=STRING)?
		('description' description=STRING)?
    '}';

enum ServiceResourceOperation returns services::ServiceResourceOperation:
	OP_CREATE = 'OP_CREATE' | OP_READ = 'OP_READ' | OP_UPDATE = 'OP_UPDATE' | OP_DELETE = 'OP_DELETE';
EDate returns ecore::EDate:
	STRING /* TODO: implement this rule and an appropriate IValueConverter */;


Availability returns availabilityContract::Availability:
	{availabilityContract::Availability}
	(Repeat?='Repeat')?
	'Availability'
	'{'
		('FromTime' FromTime=EDate)?
		('ToTime' ToTime=EDate)?
		('FromDate' FromDate=EDate)?
		('ToDate' ToDate=EDate)?
		('Repeatability' Repeatability=RepatabilityScheme)?
		('RepeatUntil' RepeatUntil=EDate)?
		('cost' cost=Cost)?
    '}';

Cost returns availabilityContract::Cost:
	{availabilityContract::Cost}
	'Cost'
	'{'
		('perUnit' perUnit=costUnit)?
		('Amount' Amount=EDoubleObject)?
    '}';

enum RepatabilityScheme returns availabilityContract::RepatabilityScheme:
	DAILY = 'DAILY' | WEEKLY = 'WEEKLY' | MONTHLY = 'MONTHLY' | YEARLY = 'YEARLY';

enum costUnit returns availabilityContract::costUnit:
	MIN = 'MIN' | HOUR = 'HOUR' | DAY = 'DAY' | USAGE = 'USAGE' | OTHER = 'OTHER';

EDoubleObject returns ecore::EDoubleObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

ReservedResourceContract returns slareservations::ReservedResourceContract:
	{slareservations::ReservedResourceContract}
	'ReservedResourceContract'
	uniqueID=STRING
	'{'
		('name' name=STRING)?
		('id' id=EInt)?
		('description' description=STRING)?
		('ValidFrom' ValidFrom=EDate)?
		('ValidUntil' ValidUntil=EDate)?
		('forResource' forResource=[resources::OfferedResource|STRING])?
    '}';
