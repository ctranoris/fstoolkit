«IMPORT radl»

«DEFINE RAService_main FOR radl::ResourceAdapter-»
«LET name.split("[.]").last().toFirstUpper()+"Service" AS RAServicename»
«LET name.split("[.]").last().toFirstUpper()+"Impl" AS RAImplName»

«LET name.replaceAll("[.]", "/") AS packagename»
«FILE packagename +"/"+RAImplName +".java"-»
package «this.name»;

//implements RA methods from the called service «RAServicename» 

import com.bct.ral.interfaces.RAService;
import com.bct.ptm.core.ral.*;
import com.bct.ral.EventTypes;
import com.bct.ral.util.XMLElement;
import com.bct.ral.util.XMLUtil;
import java.net.URL;
import java.util.*;
/**
 *
 * @author Xpand autogenerated file
 */
public class «RAImplName» 
{
	private «RAServicename» raService;
	
	public «RAImplName»(«RAServicename» srv){
		raService = srv;
	}

	«FOREACH this.confParams AS e  »
	/**
	 *  
	 * TODO Implement here your code on Set Value of Parameter: «e.name» 
	 * This protected region is enabled, therefore the contents will always be preserved by RADL generator. 
	 * If you want to get the default contents from the template you must remove the ENABLED keyword (or even remove the whole region)
	 * @see «RAServicename».provision_«e.name.replaceAll(" ", "_")»(String value) 	
	 */
	«PROTECT CSTART '/*' CEND '*/' ID 'provision_'+e.name.replaceAll(" ", "_") »
	public void provision_«e.name.replaceAll(" ", "_")»(String val) 
    {
        System.out.println("confParam «e.name» is: "+val);
		«IF e.paramType!=null »
           «IF e.paramType.pName.contains("REFERENCE")»
       //TODO Since this is a REFERENCE parameter you must add code here to extract the values you want from the other RA. 
       String OtherRAValue = XMLUtil.getXMLElement(val, "YOURVALUE_FROM_XML_REFERENCE");
       if ( !( "".equals(OtherRAValue) ) &&  ( OtherRAValue!=null)){
       		System.out.println("confParam= «e.name.replaceAll(" ", "_")»->OtherRAValue : "+OtherRAValue);
       		//You must store private in your class the OtherRAValue for further usage
       } 
		«ENDIF»
	«ENDIF»
    }    
	«ENDPROTECT-»
    «ENDFOREACH-»
    
 	«FOREACH this.confParams AS e  »
 	/** 
	 * TODO Implement here your code on Get Value of Parameter: «e.name» 
	 * Leave it null to return the initial stored Provisioning value from the Service class
	 * The code here is useful in cases like monitoring of a value by a resource when you want extra handling
	 * This protected region is enabled, therefore the contents will always be preserved by RADL generator. 
	 * If you want to get the default contents from the template you must remove the ENABLED keyword (or even remove the whole region)
	 * @see «RAServicename».get_«e.name.replaceAll(" ", "_")»()	
	 */
	«PROTECT CSTART '/*' CEND '*/' ID 'get_'+e.name.replaceAll(" ", "_") »
	public String get_«e.name.replaceAll(" ", "_")»() 
    {    	
    	return null;
    }    
	«ENDPROTECT»
    «ENDFOREACH»


	/**
	 *  
	 * TODO Implement here your code on apply configuration 
	 * Return False if you want to the default code in the Service to be executed.
	 * Return True if you will handle the configuration here.
	 * @see «RAServicename».applyConf()
	 */
	public Boolean applyConf(){
		«PROTECT CSTART '/*' CEND '*/' ID 'applyConf'»
		//This protected region is enabled, therefore the contents will always be preserved by RADL generator. 
		//If you want to get the default contents from the template you must remove the ENABLED keyword (or even remove the whole region)
		
		
		return false;
		«ENDPROTECT»
	}
	
	
	«PROTECT CSTART '/*' CEND '*/' ID 'PersonalRegion'»
	//This protected region is enabled, therefore the contents will always be preserved by RADL generator. 
	//If you want to get the default contents from the template you must remove the ENABLED keyword (or even remove the whole region)
	
	//Place in this region whatever code you want 	
	//(e.g. private, public members and methods)
	
	«ENDPROTECT»
	
}

«ENDFILE»
«ENDLET»
«ENDLET»
«ENDLET»


«ENDDEFINE»