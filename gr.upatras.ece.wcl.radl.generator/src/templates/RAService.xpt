«IMPORT radl»
«IMPORT brokermodel»

«DEFINE RAService_main FOR radl::ResourceAdapter-»

«LET name.split("[.]").last().toFirstUpper()+"Service" AS RAServicename»
«LET name.split("[.]").last().toFirstUpper()+"Impl" AS RAImplName»

«LET name.replaceAll("[.]", "/") AS packagename»

«FILE packagename +"/"+RAServicename +".java"-»
package «this.name»;


«IF (this.implname!=null) »

«LET (brokermodel::Broker)this.implname.eContainer AS theOffice» 
//implements service «this.implname.name  » by broker «  theOffice.name  »
«ENDLET»
«ENDIF»
import com.bct.ral.interfaces.RAService;
import com.bct.ptm.core.ral.*;
import com.bct.ral.EventTypes;
import com.bct.ral.util.XMLElement;
import com.bct.ral.util.XMLUtil;
import java.net.URL;
import java.util.*;
/**
 *
 * @author Xpand autogenerated file
 */
public class «RAServicename» implements RAService
{
    private String m_ptm;
    private String m_id;
    private String m_endpoint;
    private String m_type;
    private «this.name».RAInstance m_ra;
    private RANotifySoapBindingStub m_stub;
    Hashtable<String, String> m_configuration = new Hashtable<String, String>();
    private Hashtable<String, String> m_binding = new Hashtable<String, String>();
    private Vector<Hashtable> m_references = new Vector<Hashtable>();
    private «RAImplName» raimpl;    
    «IF (this.protocol!=null) && (this.protocol.metaType.isAssignableFrom(radl::ruleJavaWrapper))  » 
    private «((radl::ruleJavaWrapper)this.protocol).classname» «((radl::ruleJavaWrapper)this.protocol).classname.toLowerCase()» ;
    «ENDIF»

    public «RAServicename»(
       String ws_endpoint,
       String id,
       String ptmAccessPoint,
       String bindingInformation,
       «this.name».RAInstance ra)
    {
        m_id = id;
        m_ra = ra;
        m_ptm = ptmAccessPoint;
        m_endpoint = ws_endpoint+"/"+m_id;
        m_type = «this.name».RAActivator.m_type;
        
        raimpl = new «RAImplName»(this); //Create the Implementation class

        System.out.println(bindingInformation);
        
        RANotifyServiceLocator l = new RANotifyServiceLocator();
        try
        {
            m_stub = (RANotifySoapBindingStub) (l.getRANotify(new URL(m_ptm)));
            System.out.println(m_stub.notify(m_id, EventTypes.RA_REGISTRATION, m_endpoint));
            System.out.println(m_stub.notify(m_id, EventTypes.TYPE_ACTIVATION, m_type));
            processBindingInfo(bindingInformation);
            System.out.println(m_stub.notify(m_id, EventTypes.RA_CONNECTIVITY, getBinding()));
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }


    public String create(String resource_id, String conf_data)
    {
        System.out.println(m_id+" CREATE: "+conf_data);
        String top = XMLUtil.getTopElement(conf_data).m_name;
        Object[] param_set = null;
        String typeToCreate;
        String conf;
        if(top.equalsIgnoreCase("install"))
            typeToCreate = XMLUtil.getXMLElement(conf_data, "type");
        else
        {
            typeToCreate = top;
            param_set = XMLUtil.getElements(conf_data);
        }
        conf = XMLUtil.getTopElement(conf_data).m_value;
        boolean childCreatedSuccessfully = true;
        String errorMessage="";
        
        //GIVE DEFAULT VALUES TO BINDING PARAMS IF THEY ARE EMPTY
        «FOREACH this.bindParams AS e»
		if (  ("".equals( m_binding.get("«e.name»"))) ||  ( m_binding.get("«e.name»")==null)  ){ 
			System.out.println("Set default value «e.defValue» for «e.name»");
			m_binding.put( "«e.name»", "«e.defValue»" );
		}		
		«ENDFOREACH»		
		
		//GIVE DEFAULT VALUES TO CONFIG PARAMS IF THEY ARE EMPTY
        «FOREACH this.confParams AS e»
		if (  ("".equals( m_configuration.get("«e.name»"))) ||  ( m_configuration.get("«e.name»")==null)  ){ 
			System.out.println("Set default value «e.defValue» for «e.name»");
			m_configuration.put( "«e.name»", "«e.defValue»" );
		}		
		«ENDFOREACH»			

        try
        {
            create_resource(resource_id, typeToCreate, conf);
        }
        catch(Exception error)
        {
            errorMessage = error.getMessage();
            childCreatedSuccessfully = false;
        }
        if(childCreatedSuccessfully)
        try
        {
            String newTypeBindingParams[] = m_ra.getBindingParameters(typeToCreate);
            String conn = "<connectivity>";
            for(int i=0; i<newTypeBindingParams.length; i++)
            {
                System.out.println(newTypeBindingParams[i]+"---->"+m_binding.get(newTypeBindingParams[i]));
                System.out.println(newTypeBindingParams[i]+"---->"+m_configuration.get(newTypeBindingParams[i]));
                if(m_binding.get(newTypeBindingParams[i])!=null)
                    conn+="<"+newTypeBindingParams[i]+">"+m_binding.get(newTypeBindingParams[i])+"</"+newTypeBindingParams[i]+">";
                else
                if(m_configuration.get(newTypeBindingParams[i])!=null)
                    conn+="<"+newTypeBindingParams[i]+">"+m_configuration.get(newTypeBindingParams[i])+"</"+newTypeBindingParams[i]+">";

            }
            if(param_set!=null)
            {
                for(int i=0; i<param_set.length; i++)
                {
                    XMLElement tmp = (XMLElement)(param_set[i]);
                    conn+= "<"+tmp.m_name+">"+tmp.m_value+"</"+tmp.m_name+">";
                }
            }
            conn += "</connectivity>";
            System.out.println(m_stub.notify(resource_id, EventTypes.RA_CONNECTIVITY, conn));
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }


        if(childCreatedSuccessfully)
            return XMLUtil.xmlHeader+
           "<"+typeToCreate+">"+
           "<uuid type=\"string\">"+resource_id+"</uuid>"+
           "</"+typeToCreate+">";
        
        else
        return XMLUtil.xmlHeader
           +"<"
           +typeToCreate+" status=\"FAIL\" code=\"410\"><uuid type=\"string\">"
           +m_id+"</uuid><info>"
           +errorMessage+"</info></"
           +m_type+">";
        
    }


    public String delete(String conf_data)
    {
        System.out.println(m_id+" DELETE: "+conf_data);
         «IF (this.protocol!=null) && ( this.protocol.metaType.isAssignableFrom(radl::ruleSSH) ) »
		System.out.println("Issue ssh to remoteMachine=" + getm_bindingParam("«((radl::ruleSSH)this.protocol).remoteMachine.name »") );
        System.out.println("Credentials user=" + getm_bindingParam("«((radl::ruleSSH)this.protocol).username.name »")+", pass="+ getm_bindingParam("«((radl::ruleSSH)this.protocol).password.name »") );
        String cmd = "";
        «FOREACH ((radl::ruleSSH)this.protocol).commandsDelete AS e»
        	cmd += "«e.remoteCommand.replaceAll('\n',' ').replaceAll('\t','').replaceAll('\"','\\"') »";
        	«FOREACH e.scriptparams  AS parm »cmd +=m_configuration.get("«parm.name»");«ENDFOREACH»;        	
        «ENDFOREACH»
        System.out.println("Executing: " + cmd);
        try{
        	int port=  Integer.parseInt(getm_bindingParam("«((radl::ruleSSH)this.protocol).RPort.name »") );
            SSHExecute exc = new SSHExecute( getm_bindingParam("«((radl::ruleSSH)this.protocol).username.name »"),  getm_bindingParam("«((radl::ruleSSH)this.protocol).password.name »"), getm_bindingParam("«((radl::ruleSSH)this.protocol).remoteMachine.name »"),  port, cmd );
        	//com.uop.ssh.Exec exc = new com.uop.ssh.Exec( getm_bindingParam("«((radl::ruleSSH)this.protocol).username.name »"),  getm_bindingParam("«((radl::ruleSSH)this.protocol).password.name »"), getm_bindingParam("«((radl::ruleSSH)this.protocol).remoteMachine.name »"),  port, cmd );
        	System.out.println("Remote execution finished"+ exc.toString() );
        }finally{
        }
	    «ENDIF»
    
        return "<result>Deleted</result>";
    }

    public String update(String conf_data)
    {
        System.out.println(m_id+" UPDATE: "+conf_data);
        boolean confAppliedSuccessfully = true;
        String errorMessage="";
        if(processConfiguration(conf_data))
        {
            try
            {
                if(getConfComplete())
                {
                    //Configuration changed and parameters are all set
                    //Enabling the following line will result in invocation of the provision_X
                    //funtions applyConf();
                    «IF this.ConfComplete!=null -»
                    	«IF this.ConfComplete.contains("YES")-»
                    		applyConf();
                    	«ENDIF-»
                    «ENDIF-»                    
                    //Enabling the following line will result in invocation of the applyRef_X
                    //funtions applyReferences();                    
                    «IF (this.ConfComplete!=null) && (this.ConfComplete.contains("YES"))»
                    applyReferences();
                    «ENDIF-»
                    
                    «IF (this.ConfComplete==null)-»
                    applyConf();
                    applyReferences();
                    «ENDIF-»                    
                }
                else
                {
                    //Configuration changed but not all parameters are available
                    //Enabling the following line will result in invocation of the provision_X
                    //funtions applyConf();
                    «IF this.ConfComplete!=null &&  this.ConfComplete.contains("NO")-»
                    applyConf();
                    «ENDIF-» 
                    //Enabling the following line will result in invocation of the applyRef_X
                    //funtionsa applyReferences();                    
                    «IF this.ConfComplete!=null &&  this.ConfComplete.contains("NO")-»
                    applyReferences();
                    «ENDIF-»
                    «IF (this.ConfComplete==null)-»
                    applyConf();
                    applyReferences();
                    «ENDIF-»
                }
            }
            catch(Exception error)
            {
                errorMessage = error.getMessage();
                confAppliedSuccessfully = false;
            }
        }

        try
        {
            m_stub.notify(m_id, EventTypes.TYPE_CONFIGURATION,getConfiguration());
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        if(confAppliedSuccessfully)
        return  XMLUtil.xmlHeader+
                "<"+m_type+">"+
                    "<uuid type=\"string\">"+m_id+"</uuid>"+
                "</"+m_type+">";
        else
        return XMLUtil.xmlHeader
           +"<"
           +m_type+" status=\"FAIL\" code=\"410\"><uuid type=\"string\">"
           +m_id+"</uuid><info>"
           +errorMessage+"</info></"
           +m_type+">";
    }

    public String query(String conf_data)
    {
        String top = XMLUtil.getTopElement(conf_data).m_name;
        System.out.println(m_id+" QUERY: "+top);
        if(top.equalsIgnoreCase("connectivity"))
            return "<raid>"+m_id+"</raid>";

        else
        if(top.equalsIgnoreCase("get"))
            return  XMLUtil.xmlHeader+
                    "<"+m_type+">"+
                        "<uuid type=\"string\">"+m_id+"</uuid>"+
                        «FOREACH this.confParams AS e  SEPARATOR '	+' »
         				"<«e.name»>"+get_«e.name.replaceAll(" ", "_")»()+"</«e.name»>"«ENDFOREACH»
					+
                    "</"+m_type+">";
        else
        if(top.equalsIgnoreCase("reference"))
            //return "<"+"param_name"+">"+m_configuration.get("param_name")+"</"+"param_name"+">";
            
         return «FOREACH this.confParams AS e  SEPARATOR '	+' »
         		"<«e.name»>"+get_«e.name.replaceAll(" ", "_")»()+"</«e.name»>"
    		«ENDFOREACH»;
        else
            return  XMLUtil.xmlHeader+
                    "<"+m_type+">"+
                        "<uuid type=\"string\">"+m_id+"</uuid>"+
                    "</"+m_type+">";
    }

    private String getBinding()
    {
        Enumeration<String> keys = m_binding.keys();
        String conf="<connectivity>";
        while(keys.hasMoreElements())
        {
            String key = keys.nextElement();
            String value = m_binding.get(key);
            conf+="<"+key+">"+value+"</"+key+">";
        }
        conf+="</connectivity>";
        return conf;
    }

    private String getConfiguration()
    {
        Enumeration<String> keys = m_configuration.keys();
        String conf="<configuration>";
        while(keys.hasMoreElements())
        {
            String key = keys.nextElement();
            String value = m_configuration.get(key);
            conf+="<"+key+">"+value+"</"+key+">";
        }
        Enumeration<Hashtable> references = m_references.elements();
        while(references.hasMoreElements())
        {
            Hashtable<String, String> tempRef = references.nextElement();
            String refType = tempRef.get("type");
            conf+="<"+refType+">";
            Enumeration<String> refKeys = tempRef.keys();
            while(refKeys.hasMoreElements())
            {
                String key = refKeys.nextElement();
                if(!(key.equalsIgnoreCase("value")))
                {
                    String value = tempRef.get(key);
                    conf+="<"+key+">"+value+"</"+key+">";
                }
            }
            conf+="</"+refType+">";
        }
        conf+="</configuration>";
        return conf;
    }
    private boolean getConfComplete()
    {
    
	«IF this.ConfComplete!=null &&  this.ConfComplete.contains("NO")»
		boolean complete = false;
	«ELSE»
		boolean complete = true;
        String[] params = m_ra.getParams();
        for(int i=0; i<params.length; i++)
        {
        	complete=complete && m_configuration.containsKey(params[i]) && (!m_configuration.get(params[i]).isEmpty()) ;
            
        }
    «ENDIF»        
        return complete;
    }


    private boolean processConfiguration(String conf)
    {
        boolean valChanged = true; //always returns true. It is an update should it should be handled
        String[] params = m_ra.getParams();
        for(int i=0; i<params.length; i++)
        {
            String temp = XMLUtil.getXMLElement(conf, params[i]);
            if(temp != null)
            {
                String oldVal =  m_configuration.get(params[i]);
                if((oldVal==null) || !(oldVal.equalsIgnoreCase(temp)))
                {
                    m_configuration.put(params[i], temp);
                    valChanged = true;
                }
            }
        }
        String[] references = m_ra.getReferenceTypes();
        for(int i=0; i<references.length; i++)
        {
            String temp = XMLUtil.getXMLElement(conf, references[i]);
            if(temp != null)
            {
                temp="<"+references[i]+">"+temp+"</"+references[i]+">";
                Hashtable<String, String> tempHash = new Hashtable<String, String> ();
                tempHash.put("type", references[i]);
                Object obj[] = XMLUtil.getElements(temp);
                for(int j=0; j<obj.length; j++)
                {
                    tempHash.put(((XMLElement)obj[j]).m_name, ((XMLElement)obj[j]).m_value);
                }
                m_references.add(tempHash);
            }
        }

        return valChanged;

    }
    private boolean processBindingInfo(String conf)
    {
        boolean valChanged = false;
        String[] params = m_ra.getBindingParams();
        for(int i=0; i<params.length; i++)
        {
            String temp = XMLUtil.getXMLElement(conf, params[i]);
            if(temp != null)
            {
                String oldVal =  m_binding.get(params[i]);

                if((oldVal==null) || !(oldVal.equalsIgnoreCase(temp)))
                {
                    m_binding.put(params[i], temp);
                    valChanged = true;
                }
            }
        }
        params = m_ra.getParams();
        for(int i=0; i<params.length; i++)
        {
            String temp = XMLUtil.getXMLElement(conf, params[i]);
            if(temp != null)
            {
                m_configuration.put(params[i], temp);
            }
        }
        return valChanged;

    }

    private void applyReferences() throws Exception
    {
        Enumeration<Hashtable> references = m_references.elements();
        while(references.hasMoreElements())
        {
            Hashtable<String, String> refConf = new Hashtable<String, String>();
            Hashtable<String, String> tempRef = references.nextElement();
            String refType = tempRef.get("type");
            Enumeration<String> refKeys = tempRef.keys();
            while(refKeys.hasMoreElements())
            {
                String key = refKeys.nextElement();
                if(!(key.equalsIgnoreCase("value")))
                {
                    String value = tempRef.get(key);
                    refConf.put(key, value);
                }
            }
            applyReference(refType, refConf);
        }
    }

    private void applyConf() throws Exception
    {
    
		//GIVE DEFAULT VALUES TO BINDING PARAMS IF THEY ARE EMPTY
	«FOREACH this.bindParams AS e»
		if (  ("".equals( m_binding.get("«e.name»"))) ||  ( m_binding.get("«e.name»")==null)  ){ 
			System.out.println("Set default value «e.defValue» for «e.name»");
			m_binding.put( "«e.name»", "«e.defValue»" );
		}«ENDFOREACH»	
		
		//GIVE DEFAULT VALUES TO CONFIGURATION PARAMS IF THEY ARE EMPTY
	«FOREACH this.confParams AS e»
		if (  ("".equals( m_configuration.get("«e.name»"))) ||  ( m_configuration.get("«e.name»")==null)  ){ 
			System.out.println("Set default value «e.defValue» for «e.name»");
			m_configuration.put( "«e.name»", "«e.defValue»" );
		}«ENDFOREACH»	

	«FOREACH this.confParams AS e  »
		provision_«e.name.replaceAll(" ", "_") »(m_configuration.get("«e.name»"));«ENDFOREACH»
	
		System.out.println("===== START configuration ===== ");  
		if (!raimpl.applyConf() ){  
	«IF (this.protocol!=null) && ( this.protocol.metaType.isAssignableFrom(radl::ruleSSH ) ) -»
		 applyConf_SSH();
	«ENDIF-»    
	«IF (this.protocol!=null) && ( this.protocol.metaType.isAssignableFrom(radl::ruleHTTP ) ) -»
		 applyConf_HTTP();
	«ENDIF-»   
	
	«IF (this.protocol!=null) && ( this.protocol.metaType.isAssignableFrom(radl::ruleXMLRPC ) ) -»
		 applyConf_XMLRPC();
	«ENDIF-»    
	«IF (this.protocol!=null) && ( this.protocol.metaType.isAssignableFrom(radl::ruleJavaWrapper  ) ) -»
		 applyConf_JavaWrapper();
	«ENDIF-»    
	
	
		}
    	System.out.println("===== END  configuration ===== ");
    }
    
    
	
    
    «FOREACH this.confParams AS e  »
	private void provision_«e.name.replaceAll(" ", "_")»(String value) throws Exception
    {
       try{
            System.out.println("confParam= «e.name»: "+value);
    		raimpl.provision_«e.name.replaceAll(" ", "_")»(value); //call the user Implementation
       }
       catch(Exception error){
        throw new Exception("failed to set «e.name»");
       }
    }    
    «ENDFOREACH»
    
    
    «FOREACH this.confParams AS e  »
	private String get_«e.name.replaceAll(" ", "_")»() 
    {
    	String val = raimpl.get_«e.name.replaceAll(" ", "_")»(); //get it from the impl class
    	if ( !( "".equals(val) ) &&  ( val!=null)){
       		m_configuration.put("«e.name»", val); //put it in our conf values if we change it    
       	}

       return m_configuration.get("«e.name»"); //give it back
    }    
    «ENDFOREACH»
    
    
    
    private void applyReference(String type, Hashtable<String, String> conf) throws Exception
    {
    «FOREACH this.allowParams AS e  »
		if(type.equalsIgnoreCase("«e.name»"))
           applyRef_«e.name.replaceAll(" ", "_")»(conf);    
    «ENDFOREACH»
    }
    
    private String getm_bindingParam(String paramName){
    	return m_binding.get(paramName);
    }
    
    «IF (this.protocol!=null) && ( this.protocol.metaType.isAssignableFrom(radl::ruleSSH) ) »
    private void applyConf_SSH()
    {    
		System.out.println("Issue ssh to remoteMachine=" + getm_bindingParam("«((radl::ruleSSH)this.protocol).remoteMachine.name »") );
        System.out.println("Credentials user=" + getm_bindingParam("«((radl::ruleSSH)this.protocol).username.name »")+", pass="+ getm_bindingParam("«((radl::ruleSSH)this.protocol).password.name »") );
        String cmd = "";
        «FOREACH ((radl::ruleSSH)this.protocol).commands AS e»
        	cmd += "«e.remoteCommand.replaceAll('\n',' ').replaceAll('\t','').replaceAll('\"','\\"') »";
        	«FOREACH e.scriptparams  AS parm »cmd +=m_configuration.get("«parm.name»");«ENDFOREACH»;        	
        «ENDFOREACH»
        System.out.println("Executing: " + cmd);
        try{
        	int port=  Integer.parseInt(getm_bindingParam("«((radl::ruleSSH)this.protocol).RPort.name »") );
            SSHExecute exc = new SSHExecute( getm_bindingParam("«((radl::ruleSSH)this.protocol).username.name »"), getm_bindingParam("«((radl::ruleSSH)this.protocol).remoteMachine.name »"),  port, cmd );
        	//com.uop.ssh.Exec exc = new com.uop.ssh.Exec( getm_bindingParam("«((radl::ruleSSH)this.protocol).username.name »"),  getm_bindingParam("«((radl::ruleSSH)this.protocol).password.name »"), getm_bindingParam("«((radl::ruleSSH)this.protocol).remoteMachine.name »"),  port, cmd );
        	
        	System.out.println("Remote execution finished"+ exc.toString() );
        }finally{
        }
	}	
    «ENDIF»
    
    
    «IF (this.protocol!=null) && (this.protocol.metaType.isAssignableFrom(radl::ruleHTTP))  »  
    private void applyConf_HTTP()
    {     
        System.out.println("Issue HTTP command to remoteMachine=" + getm_bindingParam("«((radl::ruleHTTP)this.protocol).remoteMachine.name »") );
        System.out.println("Credentials user=" + getm_bindingParam("«((radl::ruleHTTP)this.protocol).username.name »")+", pass="+ getm_bindingParam("«((radl::ruleHTTP)this.protocol).password.name »") );
                
        //import org.apache.http.HttpEntity;
		//import org.apache.http.HttpResponse;
		//import org.apache.http.auth.AuthScope;
		//import org.apache.http.auth.UsernamePasswordCredentials;
		//import org.apache.http.client.methods.HttpGet;
		//import org.apache.http.impl.client.DefaultHttpClient;      
        
        DefaultHttpClient httpclient = new DefaultHttpClient();

        httpclient.getCredentialsProvider().setCredentials(
                new AuthScope("«((radl::ruleHTTP)this.protocol).remoteMachine.name »", 443), 
                new UsernamePasswordCredentials("«((radl::ruleHTTP)this.protocol).username.name »", "«((radl::ruleHTTP)this.protocol).password.name »"));
         
        String cmd = "";
        «FOREACH ((radl::ruleHTTP)this.protocol).httpURL  AS e»
        	cmd += "«e.remoteURL »";
        	«FOREACH e.scriptparams  AS parm » cmd +=" " + m_configuration.get("«parm.name»");
        	«ENDFOREACH»;        	
        «ENDFOREACH»
        System.out.println("Executing: " + cmd);
        HttpGet httpget = new HttpGet(cmd);
        
        System.out.println("executing request" + httpget.getRequestLine());
        HttpResponse response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();

        System.out.println("----------------------------------------");
        System.out.println(response.getStatusLine());
        if (entity != null) {
            System.out.println("Response content length: " + entity.getContentLength());
        }
        if (entity != null) {
            entity.consumeContent();
        }

        // When HttpClient instance is no longer needed, 
        // shut down the connection manager to ensure
        // immediate deallocation of all system resources
        httpclient.getConnectionManager().shutdown();        
        
        
	}
	«ENDIF»
	
	«IF (this.protocol!=null) && (this.protocol.metaType.isAssignableFrom(radl::ruleXMLRPC))  »  
    private void applyConf_XMLRPC()
    {     
        //import org.apache.xmlrpc.client.XmlRpcClient;
	    //import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
	
	    XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
	    config.setServerURL(new URL(  getm_bindingParam("«((radl::ruleXMLRPC)this.protocol).remoteMachine.name »")  ));
	    XmlRpcClient client = new XmlRpcClient();
	    client.setConfig(config);
	    Object[] params = new Object[]{
	    «FOREACH ((radl::ruleXMLRPC)this.protocol).URLparams  AS e SEPARATOR ","»
        	new String(  getm_bindingParam("«e.name »"))        	      	
        «ENDFOREACH»
	    };
	    Integer result = (Integer) client.execute("«((radl::ruleXMLRPC)this.protocol).RPCMethod.name »", params);
        
	}
	«ENDIF»
	
	«IF (this.protocol!=null) && (this.protocol.metaType.isAssignableFrom(radl::ruleJavaWrapper))  »  
	private void  applyConf_JavaWrapper()
	{
		try {
		
			«((radl::ruleJavaWrapper)this.protocol).classname.toLowerCase()»  = new «((radl::ruleJavaWrapper)this.protocol).classname» (
        «FOREACH ((radl::ruleJavaWrapper)this.protocol).constructorParams AS e SEPARATOR ","-»
		«IF ((radl::rulJava_param)e).metaType.isAssignableFrom(radl::rulJava_paramString) -»"«((radl::rulJava_paramString)e).stringValue»"«ENDIF-»
		«IF ((radl::rulJava_param)e).metaType.isAssignableFrom(radl::rulJava_paraScript ) -»m_configuration.get("«((radl::rulJava_paraScript)e).scriptparamValue.name -»")«ENDIF-»
        «ENDFOREACH-»);       
        
        «FOREACH ( (radl::ruleJavaWrapper)this.protocol).commands AS e-»
        
        «IF ((radl::Command)e).metaType.isAssignableFrom(radl::entryCommand) -»
        //JExecute
        	«((radl::ruleJavaWrapper)this.protocol).classname.toLowerCase()».«e.javaFunctionName»(«FOREACH e.commands AS param SEPARATOR ","-»
	«IF ((radl::rulJava_param)param).metaType.isAssignableFrom(radl::rulJava_paramString) -» "«((radl::rulJava_paramString)param).stringValue  -»" «ENDIF-»
	«IF ((radl::rulJava_param)param).metaType.isAssignableFrom(radl::rulJava_paraScript )»
	«IF  ((radl::rulJava_paraScript)param).scriptparamValue.paramType.pName.contains('Integer')  »Integer.parseInt( «ENDIF-»m_configuration.get("«((radl::rulJava_paraScript)param).scriptparamValue.name»") «IF  ((radl::rulJava_paraScript)param).scriptparamValue.paramType.pName.contains('Integer')  ») «ENDIF-»«ENDIF-»    
	«IF ((radl::rulJava_param)param).metaType.isAssignableFrom(radl::rulJava_paramInt ) -» «((radl::rulJava_paramInt)param).intValue» «ENDIF-»«ENDFOREACH»);	
        «ENDIF-»
        «IF ((radl::Command)e).metaType.isAssignableFrom(radl::assignCommand) -»
        //JAssignment
        m_configuration.put( "« ((radl::assignCommand)e).scriptParam.name»", 
        «((radl::ruleJavaWrapper)this.protocol).classname.toLowerCase()».« ((radl::assignCommand)e).javaFunctionName  »( «FOREACH ((radl::assignCommand)e).commands AS param SEPARATOR ","-»
		«IF ((radl::rulJava_param)param).metaType.isAssignableFrom(radl::rulJava_paramString) -»"«((radl::rulJava_paramString)param).stringValue»"«ENDIF-»
		«IF ((radl::rulJava_param)param).metaType.isAssignableFrom(radl::rulJava_paraScript ) -»m_configuration.get("«((radl::rulJava_paraScript)param).scriptparamValue.name -»")«ENDIF-»«ENDFOREACH-») );
        «ENDIF-»
        «ENDFOREACH-»
        
        } catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}
	«ENDIF»
	
	
    «FOREACH this.allowParams AS e  »
    private void applyRef_«e.name.replaceAll(" ", "_")»(Hashtable<String, String> conf) throws Exception
    {
       try {
           //TODO Append the reference specific code 
           
           Enumeration<String> keys = conf.keys();
           while(keys.hasMoreElements())
           {
               String tmpKey = keys.nextElement();
               System.out.println(tmpKey+":"+conf.get(tmpKey));
           }
           
       }
       catch(Exception error){
        throw new Exception("failed to set «e.name»");
       }
    }
    «ENDFOREACH»
   

    private void create_resource(String resourceid, String type, String conf) throws Exception
    {
    «FOREACH this.childParams AS e  SEPARATOR '	else'»
		if(type.equalsIgnoreCase("«e.name»"))
           create_«e.name.replaceAll(" ", "_")»(resourceid, conf);
    «ENDFOREACH»
    
    «IF this.childParams.size>0 »    
    	else
        throw new Exception("Unsupported type: "+type);
    «ENDIF»
    }
    
    «FOREACH this.childParams AS e »
	 private boolean create_«e.name.replaceAll(" ", "_")»(String resourceid, String conf) throws Exception
    {
       try
       {
           //TODO Append the child resource specific creation code and
           //return child was created properly
           //or false if any errors were encountered.           
           
           System.out.println("ID: "+resourceid+" "+XMLUtil.getXMLElement(conf, "package"));
           
       }
       catch(Exception error)
       {
        throw new Exception("failed to create «e.name» for RA-ID "+resourceid );
       }
       return true;
    }
    «ENDFOREACH»
     
}
«ENDFILE-»
«ENDLET»
«ENDLET»
«ENDLET»
«ENDDEFINE»
