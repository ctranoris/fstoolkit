«IMPORT radl»

«DEFINE RAInstance_main FOR radl::ResourceAdapter-»
«FILE name.replaceAll("[.]", "/") +"/RAInstance.java"-»
package «this.name»;

import com.bct.ral.interfaces.RA;
import com.bct.ral.interfaces.RAService;
import java.lang.reflect.Constructor;
import java.util.*;
import org.osgi.framework.*;

/**
 *
 * @author Xpand autogenerated file
 */
public class RAInstance implements RA
{
    private BundleContext m_context;
    private Constructor m_constructor;
    private Hashtable<String, ServiceRegistration> m_regs = new Hashtable<String, ServiceRegistration>();
  
    public RAInstance(BundleContext context, String className)
    {
        try
        {
            m_constructor = Class.forName(className).getConstructor(
                   new Class[]{
                        String.class, 
                        String.class, 
                        String.class, 
                        String.class,
                        RAInstance.class
                    });
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        m_context = context;
    }
    public void configure(String ws_endpoint, 
       String resourceID, 
       String ptmAccessPoint, 
       String resourceAddress, 
       String configuration)
    {
    	//changed from Properties to Dictionary...an error happens
        Dictionary m_properties = new Properties();
        m_properties.put("SOAP.service.name", resourceID);
        try
        {
            Object obj = m_constructor.newInstance(new Object[]{ws_endpoint, resourceID, ptmAccessPoint,resourceAddress, this});
            if(!configuration.equalsIgnoreCase(""))
                ((RAService)obj).update(configuration);
            ServiceRegistration tempReg = m_context.registerService(RAService.class.getName(),
               obj,
               m_properties);
            m_regs.put(resourceID, tempReg);

        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        
    }
    public void stop(String resourceID)
    {
        ServiceRegistration tempReg = m_regs.get(resourceID);
        if(tempReg!=null)
        {
            tempReg.unregister();
            m_regs.remove(resourceID);
        }
        
    }
    public void stop()
    {
        
    }
    public String[] getBindingParameters(String ra_type)
    {
        try
        {
            String filter;
            filter = "(TYPE=" + ra_type + ")";
            ServiceReference[] srs = m_context.getServiceReferences(com.bct.ral.interfaces.RA.class.getName(), filter );
            if(srs!=null)
            {
                for(int i=0; i<srs.length; i++)
                {
                    return ((com.bct.ral.interfaces.RA)(m_context.getService(srs[i]))).getBindingParams();
                }
            }
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        return new String[]{};
    }

    public String[] getParams()
    {
        return params;
    }
    public String[] getBindingParams()
    {
        return bindingparams;
    }
    public String[] getChildrenTypes()
    {
        return childrenTypes;
    }
    public String[] getReferenceTypes()
    {
        return referenceTypes;
    }

    private String[] params = new String[]
    {
    «FOREACH this.confParams AS e SEPARATOR ',' »
     "«e.name»"
    «ENDFOREACH»
    };
    private String[] childrenTypes = new String[]
    {
    «FOREACH this.childParams AS e SEPARATOR ',' »
     "«e.name»"
    «ENDFOREACH»
    };
    private String[] referenceTypes = new String[]
    {
    «FOREACH this.allowParams AS e SEPARATOR ',' »
     "«e.name»"
    «ENDFOREACH»
    };
    private String[] bindingparams = new String[]
    {
    «FOREACH this.bindParams AS e SEPARATOR ',' »
     "«e.name»"
    «ENDFOREACH»
    };
}

«ENDFILE-»
«ENDDEFINE»
