/**
 */
package brokermodel.federationscenarios.provider;

import brokermodel.federationscenarios.util.FederationscenariosAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FederationscenariosItemProviderAdapterFactory extends FederationscenariosAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FederationscenariosItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.RequestedFederationScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestedFederationScenarioItemProvider requestedFederationScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.RequestedFederationScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestedFederationScenarioAdapter() {
		if (requestedFederationScenarioItemProvider == null) {
			requestedFederationScenarioItemProvider = new RequestedFederationScenarioItemProvider(this);
		}

		return requestedFederationScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.ServiceRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceRequestItemProvider serviceRequestItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.ServiceRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceRequestAdapter() {
		if (serviceRequestItemProvider == null) {
			serviceRequestItemProvider = new ServiceRequestItemProvider(this);
		}

		return serviceRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.ResourceRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceRequestItemProvider resourceRequestItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.ResourceRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceRequestAdapter() {
		if (resourceRequestItemProvider == null) {
			resourceRequestItemProvider = new ResourceRequestItemProvider(this);
		}

		return resourceRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.SettingInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SettingInstanceItemProvider settingInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.SettingInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSettingInstanceAdapter() {
		if (settingInstanceItemProvider == null) {
			settingInstanceItemProvider = new SettingInstanceItemProvider(this);
		}

		return settingInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.ServiceSettingInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceSettingInstanceItemProvider serviceSettingInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.ServiceSettingInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceSettingInstanceAdapter() {
		if (serviceSettingInstanceItemProvider == null) {
			serviceSettingInstanceItemProvider = new ServiceSettingInstanceItemProvider(this);
		}

		return serviceSettingInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.ResourceSettingInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceSettingInstanceItemProvider resourceSettingInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.ResourceSettingInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceSettingInstanceAdapter() {
		if (resourceSettingInstanceItemProvider == null) {
			resourceSettingInstanceItemProvider = new ResourceSettingInstanceItemProvider(this);
		}

		return resourceSettingInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.Credentials} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CredentialsItemProvider credentialsItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.Credentials}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCredentialsAdapter() {
		if (credentialsItemProvider == null) {
			credentialsItemProvider = new CredentialsItemProvider(this);
		}

		return credentialsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.ServicesRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServicesRequestItemProvider servicesRequestItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.ServicesRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServicesRequestAdapter() {
		if (servicesRequestItemProvider == null) {
			servicesRequestItemProvider = new ServicesRequestItemProvider(this);
		}

		return servicesRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.InfrastructureRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureRequestItemProvider infrastructureRequestItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.InfrastructureRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureRequestAdapter() {
		if (infrastructureRequestItemProvider == null) {
			infrastructureRequestItemProvider = new InfrastructureRequestItemProvider(this);
		}

		return infrastructureRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.ScheduledPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScheduledPlanItemProvider scheduledPlanItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.ScheduledPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScheduledPlanAdapter() {
		if (scheduledPlanItemProvider == null) {
			scheduledPlanItemProvider = new ScheduledPlanItemProvider(this);
		}

		return scheduledPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link brokermodel.federationscenarios.ResourceGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceGroupItemProvider resourceGroupItemProvider;

	/**
	 * This creates an adapter for a {@link brokermodel.federationscenarios.ResourceGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceGroupAdapter() {
		if (resourceGroupItemProvider == null) {
			resourceGroupItemProvider = new ResourceGroupItemProvider(this);
		}

		return resourceGroupItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (requestedFederationScenarioItemProvider != null) requestedFederationScenarioItemProvider.dispose();
		if (serviceRequestItemProvider != null) serviceRequestItemProvider.dispose();
		if (resourceRequestItemProvider != null) resourceRequestItemProvider.dispose();
		if (settingInstanceItemProvider != null) settingInstanceItemProvider.dispose();
		if (serviceSettingInstanceItemProvider != null) serviceSettingInstanceItemProvider.dispose();
		if (resourceSettingInstanceItemProvider != null) resourceSettingInstanceItemProvider.dispose();
		if (credentialsItemProvider != null) credentialsItemProvider.dispose();
		if (servicesRequestItemProvider != null) servicesRequestItemProvider.dispose();
		if (infrastructureRequestItemProvider != null) infrastructureRequestItemProvider.dispose();
		if (scheduledPlanItemProvider != null) scheduledPlanItemProvider.dispose();
		if (importItemProvider != null) importItemProvider.dispose();
		if (resourceGroupItemProvider != null) resourceGroupItemProvider.dispose();
	}

}
