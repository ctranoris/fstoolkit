/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package FederationOffice.services.provider;

import FederationOffice.services.util.ServicesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ServicesItemProviderAdapterFactory extends ServicesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ServicesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.ServiceSetting} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceSettingItemProvider serviceSettingItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.ServiceSetting}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceSettingAdapter() {
		if (serviceSettingItemProvider == null) {
			serviceSettingItemProvider = new ServiceSettingItemProvider(this);
		}

		return serviceSettingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.OfferedService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OfferedServiceItemProvider offeredServiceItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.OfferedService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOfferedServiceAdapter() {
		if (offeredServiceItemProvider == null) {
			offeredServiceItemProvider = new OfferedServiceItemProvider(this);
		}

		return offeredServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.ServiceComposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceCompositionItemProvider serviceCompositionItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.ServiceComposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceCompositionAdapter() {
		if (serviceCompositionItemProvider == null) {
			serviceCompositionItemProvider = new ServiceCompositionItemProvider(this);
		}

		return serviceCompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.tideTypeString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected tideTypeStringItemProvider tideTypeStringItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.tideTypeString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createtideTypeStringAdapter() {
		if (tideTypeStringItemProvider == null) {
			tideTypeStringItemProvider = new tideTypeStringItemProvider(this);
		}

		return tideTypeStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.tideTypeEnum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected tideTypeEnumItemProvider tideTypeEnumItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.tideTypeEnum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createtideTypeEnumAdapter() {
		if (tideTypeEnumItemProvider == null) {
			tideTypeEnumItemProvider = new tideTypeEnumItemProvider(this);
		}

		return tideTypeEnumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.tideTypeList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected tideTypeListItemProvider tideTypeListItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.tideTypeList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createtideTypeListAdapter() {
		if (tideTypeListItemProvider == null) {
			tideTypeListItemProvider = new tideTypeListItemProvider(this);
		}

		return tideTypeListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.tideTypeEnumItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected tideTypeEnumItemItemProvider tideTypeEnumItemItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.tideTypeEnumItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createtideTypeEnumItemAdapter() {
		if (tideTypeEnumItemItemProvider == null) {
			tideTypeEnumItemItemProvider = new tideTypeEnumItemItemProvider(this);
		}

		return tideTypeEnumItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.tideTypeTideElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected tideTypeTideElementItemProvider tideTypeTideElementItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.tideTypeTideElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createtideTypeTideElementAdapter() {
		if (tideTypeTideElementItemProvider == null) {
			tideTypeTideElementItemProvider = new tideTypeTideElementItemProvider(this);
		}

		return tideTypeTideElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.Taxonomy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaxonomyItemProvider taxonomyItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.Taxonomy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaxonomyAdapter() {
		if (taxonomyItemProvider == null) {
			taxonomyItemProvider = new TaxonomyItemProvider(this);
		}

		return taxonomyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.AbstractSetting} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractSettingItemProvider abstractSettingItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.AbstractSetting}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractSettingAdapter() {
		if (abstractSettingItemProvider == null) {
			abstractSettingItemProvider = new AbstractSettingItemProvider(this);
		}

		return abstractSettingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link FederationOffice.services.SettingConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SettingConstraintItemProvider settingConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link FederationOffice.services.SettingConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSettingConstraintAdapter() {
		if (settingConstraintItemProvider == null) {
			settingConstraintItemProvider = new SettingConstraintItemProvider(this);
		}

		return settingConstraintItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (serviceSettingItemProvider != null) serviceSettingItemProvider.dispose();
		if (offeredServiceItemProvider != null) offeredServiceItemProvider.dispose();
		if (serviceCompositionItemProvider != null) serviceCompositionItemProvider.dispose();
		if (tideTypeStringItemProvider != null) tideTypeStringItemProvider.dispose();
		if (tideTypeEnumItemProvider != null) tideTypeEnumItemProvider.dispose();
		if (tideTypeListItemProvider != null) tideTypeListItemProvider.dispose();
		if (tideTypeEnumItemItemProvider != null) tideTypeEnumItemItemProvider.dispose();
		if (tideTypeTideElementItemProvider != null) tideTypeTideElementItemProvider.dispose();
		if (taxonomyItemProvider != null) taxonomyItemProvider.dispose();
		if (abstractSettingItemProvider != null) abstractSettingItemProvider.dispose();
		if (settingConstraintItemProvider != null) settingConstraintItemProvider.dispose();
	}

}
